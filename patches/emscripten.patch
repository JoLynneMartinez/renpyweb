diff --git a/src/library_html5.js b/src/library_html5.js
index f278bb952..6ca12df18 100644
--- a/src/library_html5.js
+++ b/src/library_html5.js
@@ -1532,7 +1532,9 @@ var LibraryJSEvents = {
       return {{{ cDefine('EMSCRIPTEN_RESULT_NOT_SUPPORTED') }}};
     }
 
-    if (__currentFullscreenStrategy.canvasResizedCallback) {
+    // https://github.com/emscripten-ports/SDL2/issues/87
+    //if (__currentFullscreenStrategy.canvasResizedCallback) {
+    if (false) {
 #if USE_PTHREADS
         if (__currentFullscreenStrategy.canvasResizedCallbackTargetThread) JSEvents.queueEventHandlerOnThread_iiii(__currentFullscreenStrategy.canvasResizedCallbackTargetThread, __currentFullscreenStrategy.canvasResizedCallback, {{{ cDefine('EMSCRIPTEN_EVENT_CANVASRESIZED') }}}, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
         else
diff --git a/tools/emterpretify.py b/tools/emterpretify.py
index 92b91f0ce..ad9f42091 100755
--- a/tools/emterpretify.py
+++ b/tools/emterpretify.py
@@ -27,7 +27,8 @@ logger = logging.getLogger('emterpretify')
 
 INNERTERPRETER_LAST_OPCODE = 0 # 'CONDD'
 
-EMT_STACK_MAX = 1024 * 1024
+# Double stack size for renpyweb
+EMT_STACK_MAX = 2 * 1024 * 1024
 
 LOG_CODE = int(os.environ.get('EMCC_LOG_EMTERPRETER_CODE', '0'))
 
diff --git a/tools/ports/__init__.py b/tools/ports/__init__.py
index 518102344..822c1da36 100644
--- a/tools/ports/__init__.py
+++ b/tools/ports/__init__.py
@@ -39,6 +39,7 @@ def init():
     ports_by_name[name] = port
     for a in expected_attrs:
       assert hasattr(port, a), 'port %s is missing %s' % (port, a)
+  ports_by_name['sdl2emterpreter']=sdl2
 
 
 init()
diff --git a/tools/ports/sdl2.py b/tools/ports/sdl2.py
index c46b1b3d2..7f5205744 100644
--- a/tools/ports/sdl2.py
+++ b/tools/ports/sdl2.py
@@ -11,6 +11,49 @@ HASH = '3a677c06d693c1568543eeb9179f9211a8c482738dab4400ccbc39aabe0cd1e57085e63b
 SUBDIR = 'SDL2-' + TAG
 
 
+# https://github.com/emscripten-ports/SDL2/issues/70
+# https://groups.google.com/forum/#!topic/emscripten-discuss/v1w6PGYhNOA
+def sdl2emterpreter(ports, settings, shared):
+  # get the port
+  ports.fetch_project('sdl2emterpreter', 'https://needoverwrite/' + TAG + '.zip', SUBDIR)
+  libname = ports.get_lib_name('libSDL2')
+
+  def create():
+    # we are rebuilding SDL, clear dependant projects so they copy in their includes to ours properly
+    ports.clear_project_build('sdl2_image')
+    ports.clear_project_build('sdl2_mixer')
+    ports.clear_project_build('sdl2_net')
+    ports.clear_project_build('sdl2_ttf')
+    ports.clear_project_build('sdl2_gfx')
+    # copy includes to a location so they can be used as 'SDL2/'
+    source_include_path = os.path.join(ports.get_dir(), 'sdl2emterpreter', SUBDIR + '', 'include')
+    dest_include_path = os.path.join(shared.Cache.get_path('ports-builds'), 'sdl2emterpreter', 'include')
+    shared.try_delete(dest_include_path)
+    shutil.copytree(source_include_path, dest_include_path)
+    shutil.copytree(source_include_path, os.path.join(dest_include_path, 'SDL2'))
+    # write out an SDL_config.h file, that configure would normally emit
+    open(os.path.join(dest_include_path, 'SDL_config.h'), 'w').write(sdl_config_h)
+    open(os.path.join(dest_include_path, 'SDL2', 'SDL_config.h'), 'w').write(sdl_config_h)
+    # build
+    srcs = 'SDL.c SDL_assert.c SDL_dataqueue.c SDL_error.c SDL_hints.c SDL_log.c atomic/SDL_atomic.c atomic/SDL_spinlock.c audio/SDL_audio.c audio/SDL_audiocvt.c audio/SDL_audiodev.c audio/SDL_audiotypecvt.c audio/SDL_mixer.c audio/SDL_wave.c cpuinfo/SDL_cpuinfo.c dynapi/SDL_dynapi.c events/SDL_clipboardevents.c events/SDL_dropevents.c events/SDL_events.c events/SDL_gesture.c events/SDL_keyboard.c events/SDL_mouse.c events/SDL_quit.c events/SDL_touch.c events/SDL_windowevents.c file/SDL_rwops.c haptic/SDL_haptic.c joystick/SDL_gamecontroller.c joystick/SDL_joystick.c libm/e_atan2.c libm/e_log.c libm/e_pow.c libm/e_rem_pio2.c libm/e_sqrt.c libm/k_cos.c libm/k_rem_pio2.c libm/k_sin.c libm/k_tan.c libm/s_atan.c libm/s_copysign.c libm/s_cos.c libm/s_fabs.c libm/s_floor.c libm/s_scalbn.c libm/s_sin.c libm/s_tan.c power/SDL_power.c render/SDL_d3dmath.c render/SDL_render.c render/SDL_yuv_sw.c render/direct3d/SDL_render_d3d.c render/direct3d11/SDL_render_d3d11.c render/opengl/SDL_render_gl.c render/opengl/SDL_shaders_gl.c render/opengles/SDL_render_gles.c render/opengles2/SDL_render_gles2.c render/opengles2/SDL_shaders_gles2.c render/psp/SDL_render_psp.c render/software/SDL_blendfillrect.c render/software/SDL_blendline.c render/software/SDL_blendpoint.c render/software/SDL_drawline.c render/software/SDL_drawpoint.c render/software/SDL_render_sw.c render/software/SDL_rotate.c sensor/SDL_sensor.c stdlib/SDL_getenv.c stdlib/SDL_iconv.c stdlib/SDL_malloc.c stdlib/SDL_qsort.c stdlib/SDL_stdlib.c stdlib/SDL_string.c thread/SDL_thread.c timer/SDL_timer.c video/SDL_RLEaccel.c video/SDL_blit.c video/SDL_blit_0.c video/SDL_blit_1.c video/SDL_blit_A.c video/SDL_blit_N.c video/SDL_blit_auto.c video/SDL_blit_copy.c video/SDL_blit_slow.c video/SDL_bmp.c video/SDL_clipboard.c video/SDL_egl.c video/SDL_fillrect.c video/SDL_pixels.c video/SDL_rect.c video/SDL_shape.c video/SDL_stretch.c video/SDL_surface.c video/SDL_video.c video/SDL_yuv.c video/emscripten/SDL_emscriptenevents.c video/emscripten/SDL_emscriptenframebuffer.c video/emscripten/SDL_emscriptenmouse.c video/emscripten/SDL_emscriptenopengles.c video/emscripten/SDL_emscriptenvideo.c audio/emscripten/SDL_emscriptenaudio.c video/dummy/SDL_nullevents.c video/dummy/SDL_nullframebuffer.c video/dummy/SDL_nullvideo.c video/yuv2rgb/yuv_rgb.c audio/disk/SDL_diskaudio.c audio/dummy/SDL_dummyaudio.c loadso/dlopen/SDL_sysloadso.c power/emscripten/SDL_syspower.c joystick/emscripten/SDL_sysjoystick.c filesystem/emscripten/SDL_sysfilesystem.c timer/unix/SDL_systimer.c haptic/dummy/SDL_syshaptic.c main/dummy/SDL_dummy_main.c'.split()
+    thread_srcs = ['SDL_syscond.c', 'SDL_sysmutex.c', 'SDL_syssem.c', 'SDL_systhread.c', 'SDL_systls.c']
+    thread_backend = 'generic' if not settings.USE_PTHREADS else 'pthread'
+    srcs += ['thread/%s/%s' % (thread_backend, s) for s in thread_srcs]
+
+    commands = []
+    o_s = []
+    for src in srcs:
+      o = os.path.join(ports.get_build_dir(), 'sdl2emterpreter', 'src', src + '.o')
+      shared.safe_ensure_dirs(os.path.dirname(o))
+      commands.append([shared.PYTHON, shared.EMCC, os.path.join(ports.get_dir(), 'sdl2emterpreter', SUBDIR, 'src', src), '-O2', '-o', o, '-I' + dest_include_path, '-O2', '-DUSING_GENERATED_CONFIG_H', '-w'])
+      o_s.append(o)
+    ports.run_commands(commands)
+    final = os.path.join(ports.get_build_dir(), 'sdl2emterpreter', libname)
+    ports.create_lib(final, o_s)
+    return final
+
+  return [shared.Cache.get(libname, create, what='port')]
+
 def get(ports, settings, shared):
   if settings.USE_SDL != 2:
     return []
@@ -53,7 +96,11 @@ def get(ports, settings, shared):
     ports.create_lib(final, o_s)
     return final
 
-  return [shared.Cache.get(libname, create, what='port')]
+  # always build vanilla sdl2 port whose paths sdl2_* depend on
+  sdl2vanilla = [shared.Cache.get(libname, create, what='port')]
+  if settings.EMTERPRETIFY_ASYNC == 1:
+    return sdl2emterpreter(ports, settings, shared)
+  return sdl2vanilla
 
 
 def clear(ports, shared):


diff --git a/emcc.py b/emcc.py
index 9d9d1ec4371..799f63bdd3e 100755
--- a/emcc.py
+++ b/emcc.py
@@ -678,6 +678,15 @@ def filter_emscripten_options(argv):
       cmd += ['-s', 'NO_EXIT_RUNTIME=0']
       # use node.js raw filesystem access, to behave just like a native executable
       cmd += ['-s', 'NODERAWFS=1']
+      # https://github.com/emscripten-core/emscripten/issues/9257#issuecomment-523670023
+      # [Revert 08d5e0c36d662104ac27432d5fc872423b9e578f]
+      # Disable wasm in configuration checks so that (1) we do not depend on
+      # wasm support just for configuration (perhaps the user does not intend
+      # to build to wasm; using asm.js only depends on js which we need anyhow),
+      # and (2) we don't have issues with a separate .wasm file
+      # on the side, async startup, etc..
+      if not shared.Settings.WASM_BACKEND:
+        cmd += ['-s', 'WASM=0']
 
     logger.debug('just configuring: ' + ' '.join(cmd))
     if debug_configure:
