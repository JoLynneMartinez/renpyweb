diff --git a/emcc.py b/emcc.py
index 5b74801de..95d2183a2 100755
--- a/emcc.py
+++ b/emcc.py
@@ -685,6 +685,15 @@ There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR P
       cmd += ['-s', 'NO_EXIT_RUNTIME=0']
       # use node.js raw filesystem access, to behave just like a native executable
       cmd += ['-s', 'NODERAWFS=1']
+      # https://github.com/emscripten-core/emscripten/issues/9257#issuecomment-523670023
+      # [Revert 08d5e0c36d662104ac27432d5fc872423b9e578f]
+      # Disable wasm in configuration checks so that (1) we do not depend on
+      # wasm support just for configuration (perhaps the user does not intend
+      # to build to wasm; using asm.js only depends on js which we need anyhow),
+      # and (2) we don't have issues with a separate .wasm file
+      # on the side, async startup, etc..
+      if not shared.Settings.WASM_BACKEND:
+        cmd += ['-s', 'WASM=0']
 
     logger.debug('just configuring: ' + ' '.join(cmd))
     if debug_configure:
diff --git a/src/library_html5.js b/src/library_html5.js
index 59b1fe470..6be651920 100644
--- a/src/library_html5.js
+++ b/src/library_html5.js
@@ -1533,7 +1533,9 @@ var LibraryJSEvents = {
       return {{{ cDefine('EMSCRIPTEN_RESULT_NOT_SUPPORTED') }}};
     }
 
-    if (__currentFullscreenStrategy.canvasResizedCallback) {
+    // https://github.com/emscripten-ports/SDL2/issues/87
+    //if (__currentFullscreenStrategy.canvasResizedCallback) {
+    if (false) {
 #if USE_PTHREADS
         if (__currentFullscreenStrategy.canvasResizedCallbackTargetThread) JSEvents.queueEventHandlerOnThread_iiii(__currentFullscreenStrategy.canvasResizedCallbackTargetThread, __currentFullscreenStrategy.canvasResizedCallback, {{{ cDefine('EMSCRIPTEN_EVENT_CANVASRESIZED') }}}, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
         else
diff --git a/tools/emterpretify.py b/tools/emterpretify.py
index bf263995d..c1b75e8bc 100755
--- a/tools/emterpretify.py
+++ b/tools/emterpretify.py
@@ -27,7 +27,8 @@ logger = logging.getLogger('emterpretify')
 
 INNERTERPRETER_LAST_OPCODE = 0 # 'CONDD'
 
-EMT_STACK_MAX = 1024 * 1024
+# Double stack size for renpyweb
+EMT_STACK_MAX = 2 * 1024 * 1024
 
 LOG_CODE = int(os.environ.get('EMCC_LOG_EMTERPRETER_CODE', '0'))
 
