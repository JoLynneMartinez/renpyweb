diff --git a/tools/acorn-optimizer.js b/tools/acorn-optimizer.js
index 7cdd1b59e..d7d73a9b0 100644
--- a/tools/acorn-optimizer.js
+++ b/tools/acorn-optimizer.js
@@ -573,8 +573,8 @@ function emitDCEGraph(ast) {
   // or, in the minimal runtime, it looks like
   //
   //  WebAssembly.instantiate(Module["wasm"], imports).then(function(output) {
-  //   var asm = output.instance.exports; // may also not have "var", if
-  //                                      // declared outside and used elsewhere
+  //   https://github.com/emscripten-core/emscripten/issues/10745
+  //   var asm = output.instance.exports;
   //   ..
   //   _malloc = asm["malloc"];
   //   ..
@@ -671,48 +671,38 @@ function emitDCEGraph(ast) {
         var body = node.body.body;
         if (body.length >= 1) {
           var first = body[0];
-          var target, value; // "(var?) target = value"
-          // Look either for  var asm =  or just   asm =
           if (first.type === 'VariableDeclaration' && first.declarations.length === 1) {
             var decl = first.declarations[0];
-            target = decl.id;
-            value = decl.init;
-          } else if (first.type === 'ExpressionStatement' &&
-                     first.expression.type === 'AssignmentExpression') {
-            var assign = first.expression;
-            if (assign.operator === '=') {
-              target = assign.left;
-              value = assign.right;
-            }
-          }
-          if (target.type === 'Identifier' && target.name === 'asm' && value) {
-            if (value.type === 'MemberExpression' &&
-                value.object.type === 'MemberExpression' &&
-                value.object.object.type === 'Identifier' &&
-                value.object.object.name === 'output' &&
-                value.object.property.type === 'Identifier' &&
-                value.object.property.name === 'instance' &&
-                value.property.type === 'Identifier' &&
-                value.property.name === 'exports') {
-              // This looks very much like what we are looking for.
-              assert(!foundMinimalRuntimeExports);
-              for (var i = 1; i < body.length; i++) {
-                var item = body[i];
-                if (item.type === 'ExpressionStatement' &&
-                    item.expression.type === 'AssignmentExpression' &&
-                    item.expression.operator === '=' &&
-                    item.expression.left.type === 'Identifier' &&
-                    item.expression.right.type === 'MemberExpression' &&
-                    item.expression.right.object.type === 'Identifier' &&
-                    item.expression.right.object.name === 'asm' &&
-                    item.expression.right.property.type === 'Literal') {
-                  var name = item.expression.left.name;
-                  var asmName = item.expression.right.property.value;
-                  saveAsmExport(name, asmName);
-                  emptyOut(item); // ignore all this in the second pass; this does not root
+            if (decl.id.type === 'Identifier' && decl.id.name === 'asm') {
+              var value = decl.init;
+              if (value.type === 'MemberExpression' &&
+                  value.object.type === 'MemberExpression' &&
+                  value.object.object.type === 'Identifier' &&
+                  value.object.object.name === 'output' &&
+                  value.object.property.type === 'Identifier' &&
+                  value.object.property.name === 'instance' &&
+                  value.property.type === 'Identifier' &&
+                  value.property.name === 'exports') {
+                // This looks very much like what we are looking for.
+                assert(!foundMinimalRuntimeExports);
+                for (var i = 1; i < body.length; i++) {
+                  var item = body[i];
+                  if (item.type === 'ExpressionStatement' &&
+                      item.expression.type === 'AssignmentExpression' &&
+                      item.expression.operator === '=' &&
+                      item.expression.left.type === 'Identifier' &&
+                      item.expression.right.type === 'MemberExpression' &&
+                      item.expression.right.object.type === 'Identifier' &&
+                      item.expression.right.object.name === 'asm' &&
+                      item.expression.right.property.type === 'Literal') {
+                    var name = item.expression.left.name;
+                    var asmName = item.expression.right.property.value;
+                    saveAsmExport(name, asmName);
+                    emptyOut(item); // ignore all this in the second pass; this does not root
+                  }
                 }
+                foundMinimalRuntimeExports = true;
               }
-              foundMinimalRuntimeExports = true;
             }
           }
         }
diff --git a/tools/system_libs.py b/tools/system_libs.py
index 11fe8646f..02a772513 100755
--- a/tools/system_libs.py
+++ b/tools/system_libs.py
@@ -53,7 +53,8 @@ def dir_is_newer(dir_a, dir_b):
   assert os.path.exists(dir_b)
   newest_a = max([os.path.getmtime(x) for x in get_all_files_under(dir_a)])
   newest_b = max([os.path.getmtime(x) for x in get_all_files_under(dir_b)])
-  return newest_a < newest_b
+  # https://github.com/emscripten-core/emscripten/issues/9342
+  return newest_a > newest_b
 
 
 def get_cflags(force_object_files=False):
