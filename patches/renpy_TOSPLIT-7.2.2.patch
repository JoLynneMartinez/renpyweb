diff --git a/module/ffmedia.c b/module/ffmedia.c
index 2379837a..3fb869ef 100644
--- a/module/ffmedia.c
+++ b/module/ffmedia.c
@@ -649,6 +649,7 @@ static SurfaceQueueEntry *decode_video_frame(MediaState *ms) {
 		int read_size = avcodec_decode_video2(ms->video_context, ms->video_decode_frame, &got_frame, &ms->video_pkt_tmp);
 
 		if (read_size < 0) {
+			// printf("read_size < 0\n");
 			ms->video_finished = 1;
 			return NULL;
 		}
@@ -661,6 +662,7 @@ static SurfaceQueueEntry *decode_video_frame(MediaState *ms) {
 		}
 
 		if (!got_frame && !ms->video_pkt.size) {
+			// printf("!got_frame && !ms->video_pkt.size\n");
 			ms->video_finished = 1;
 			return NULL;
 		}
@@ -680,6 +682,7 @@ static SurfaceQueueEntry *decode_video_frame(MediaState *ms) {
 		// If we're 5s behind, give up on video for the time being, so we don't
 		// blow out memory.
 		if (ms->video_pts_offset + pts < ms->video_read_time - 5.0) {
+			// printf("ms->video_pts_offset + pts < ms->video_read_time - 5.0\n");
 			ms->video_finished = 1;
 		}
 
@@ -709,6 +712,7 @@ static SurfaceQueueEntry *decode_video_frame(MediaState *ms) {
 		);
 
 	if (!ms->sws) {
+		// printf("!ms->sws\n");
 		ms->video_finished = 1;
 		return NULL;
 	}
@@ -754,8 +758,15 @@ static SurfaceQueueEntry *decode_video_frame(MediaState *ms) {
 }
 
 
+static unsigned int bench_timespent = 0;
+static unsigned int bench_count = 0;
+
 static void decode_video(MediaState *ms) {
+  // printf("decode_video\n");
+  unsigned int bench_start = SDL_GetTicks();
+
 	if (!ms->video_context) {
+		// printf("!ms->video_context\n");
 		ms->video_finished = 1;
 		return;
 	}
@@ -785,13 +796,32 @@ static void decode_video(MediaState *ms) {
 	}
 
 	SDL_UnlockMutex(ms->lock);
+
+  bench_timespent += SDL_GetTicks() - bench_start;
+  bench_count++;
+  if (bench_timespent > 200) {
+    printf("decode_video: %dms avg\n", bench_timespent/bench_count);
+    //fflush(stdout);
+    bench_count = 0;
+    bench_timespent = 0;
+  }
 }
 
 
+static int decode_sync_start(void *arg);
+void media_read_sync(struct MediaState *ms);
+void media_read_sync_finish(struct MediaState *ms);
+
+
 /**
  * Returns 1 if there is a video frame ready on this channel, or 0 otherwise.
  */
 int media_video_ready(struct MediaState *ms) {
+	// printf("---* media_video_ready\n");
+	// crashes in emscripten/native-emu possibly due to using a real SDL audio thread;
+	// closes video in emscripten/browser as media_sync_start not called yet
+	//media_read_sync(ms);
+
 	int consumed = 0;
 	int rv = 0;
 
@@ -857,6 +887,8 @@ done:
 
 
 SDL_Surface *media_read_video(MediaState *ms) {
+	// printf("---* media_read_video\n");
+
 	SDL_Surface *rv = NULL;
 	SurfaceQueueEntry *sqe = NULL;
 
@@ -866,9 +898,11 @@ SDL_Surface *media_read_video(MediaState *ms) {
 
 	SDL_LockMutex(ms->lock);
 
-	while (!ms->ready) {
-		SDL_CondWait(ms->cond, ms->lock);
-	}
+	/* while (!ms->ready) { */
+	/* 	SDL_CondWait(ms->cond, ms->lock); */
+	/* } */
+	// probably not the right place to do it, doesn't deal with media_video_ready()
+	//media_read_sync(ms);
 
 	if (!ms->surface_queue_size) {
 		goto done;
@@ -1042,7 +1076,147 @@ finish:
 }
 
 
+void media_read_sync_finish(struct MediaState *ms) {
+	// copy/paste from end of decode_thread
+
+//finish:
+	/* Data used by the decoder should be freed here, while data shared with
+	 * the readers should be freed in media_close.
+	 */
+
+	SDL_LockMutex(ms->lock);
+
+	/* Ensures that every stream becomes ready. */
+	if (!ms->ready) {
+		ms->ready = 1;
+		SDL_CondBroadcast(ms->cond);
+	}
+
+	while (!ms->quit) {
+		/* SDL_CondWait(ms->cond, ms->lock); */
+	}
+
+	SDL_UnlockMutex(ms->lock);
+
+	deallocate(ms);
+}
+
+
+static int decode_sync_start(void *arg) {
+        // copy/paste from start of decode_thread
+	MediaState *ms = (MediaState *) arg;
+
+	int err;
+
+	AVFormatContext *ctx = avformat_alloc_context();
+	ms->ctx = ctx;
+
+	AVIOContext *io_context = rwops_open(ms->rwops);
+	ctx->pb = io_context;
+
+	err = avformat_open_input(&ctx, ms->filename, NULL, NULL);
+	if (err) {
+	  media_read_sync_finish(ms);
+	}
+
+	err = avformat_find_stream_info(ctx, NULL);
+	if (err) {
+	  media_read_sync_finish(ms);
+	}
+
+
+	ms->video_stream = -1;
+	ms->audio_stream = -1;
+
+	for (int i = 0; i < ctx->nb_streams; i++) {
+		if (ctx->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO) {
+			if (ms->want_video && ms->video_stream == -1) {
+				ms->video_stream = i;
+			}
+		}
+
+		if (ctx->streams[i]->codec->codec_type == AVMEDIA_TYPE_AUDIO) {
+			if (ms->audio_stream == -1) {
+				ms->audio_stream = i;
+			}
+		}
+	}
+
+	ms->video_context = find_context(ctx, ms->video_stream);
+	ms->audio_context = find_context(ctx, ms->audio_stream);
+
+	ms->swr = swr_alloc();
+
+	av_init_packet(&ms->video_pkt);
+
+	// Compute the number of samples we need to play back.
+	if (ms->audio_duration < 0) {
+		if (av_fmt_ctx_get_duration_estimation_method(ctx) != AVFMT_DURATION_FROM_BITRATE) {
+
+			long long duration = ((long long) ctx->duration) * audio_sample_rate;
+			ms->audio_duration = (unsigned int) (duration /  AV_TIME_BASE);
+
+			ms->total_duration = 1.0 * ctx->duration / AV_TIME_BASE;
+
+			// Check that the duration is reasonable (between 0s and 3600s). If not,
+			// reject it.
+			if (ms->audio_duration < 0 || ms->audio_duration > 3600 * audio_sample_rate) {
+				ms->audio_duration = -1;
+			}
+
+			ms->audio_duration -= (unsigned int) (ms->skip * audio_sample_rate);
+
+
+		} else {
+			ms->audio_duration = -1;
+		}
+	}
+
+	if (ms->skip != 0.0) {
+		av_seek_frame(ctx, -1, (int64_t) (ms->skip * AV_TIME_BASE), AVSEEK_FLAG_BACKWARD);
+	}
+
+	// [snip!]
+
+	return 0;
+}
+
+
+void media_read_sync(struct MediaState *ms) {
+	// copy/paste from middle of decode_thread
+	// printf("---* media_read_sync %p\n", ms);
+
+	//while (!ms->quit) {
+	if (!ms->quit) {
+		// printf("     audio_finished: %d, video_finished: %d\n", ms->audio_finished, ms->video_finished);
+		if (! ms->audio_finished) {
+			decode_audio(ms);
+		}
+
+		if (! ms->video_finished) {
+			decode_video(ms);
+		}
+
+		SDL_LockMutex(ms->lock);
+
+		if (!ms->ready) {
+			ms->ready = 1;
+			SDL_CondBroadcast(ms->cond);
+		}
+
+		if (!(ms->needs_decode || ms->quit)) {
+			/* SDL_CondWait(ms->cond, ms->lock); */
+		}
+
+		ms->needs_decode = 0;
+
+		SDL_UnlockMutex(ms->lock);
+	}
+}
+
+
 int media_read_audio(struct MediaState *ms, Uint8 *stream, int len) {
+	media_read_sync(ms);
 
 	SDL_LockMutex(ms->lock);
 
@@ -1127,13 +1301,13 @@ int media_read_audio(struct MediaState *ms, Uint8 *stream, int len) {
 }
 
 void media_wait_ready(struct MediaState *ms) {
-    SDL_LockMutex(ms->lock);
+    /* SDL_LockMutex(ms->lock); */
 
-    while (!ms->ready) {
-        SDL_CondWait(ms->cond, ms->lock);
-    }
+    /* while (!ms->ready) { */
+    /*     SDL_CondWait(ms->cond, ms->lock); */
+    /* } */
 
-    SDL_UnlockMutex(ms->lock);
+    /* SDL_UnlockMutex(ms->lock); */
 }
 
 
@@ -1142,15 +1316,17 @@ double media_duration(MediaState *ms) {
 }
 
 void media_start(MediaState *ms) {
-	char buf[1024];
+	/* char buf[1024]; */
 
-	snprintf(buf, 1024, "decode: %s", ms->filename);
-	SDL_Thread *t = SDL_CreateThread(decode_thread, buf, (void *) ms);
+	/* snprintf(buf, 1024, "decode: %s", ms->filename); */
+	/* SDL_Thread *t = SDL_CreateThread(decode_thread, buf, (void *) ms); */
 
-	if (t) {
-		ms->started = 1;
-		SDL_DetachThread(t);
-	}
+	/* if (t) { */
+	/* 	ms->started = 1; */
+	/* 	SDL_DetachThread(t); */
+	/* } */
+
+	decode_sync_start(ms);
 }
 
 
@@ -1210,6 +1386,7 @@ void media_close(MediaState *ms) {
 	/* Tell the decoder to terminate. It will deallocate everything for us. */
 	SDL_LockMutex(ms->lock);
 	ms->quit = 1;
+	media_read_sync_finish(ms);
 	SDL_CondBroadcast(ms->cond);
 	SDL_UnlockMutex(ms->lock);
 
diff --git a/module/renpysound_core.c b/module/renpysound_core.c
index 77e2f4c7..3fc86789 100644
--- a/module/renpysound_core.c
+++ b/module/renpysound_core.c
@@ -61,21 +61,21 @@ PyThreadState* thread = NULL;
 static void incref(PyObject *ref) {
     PyThreadState *oldstate;
 
-    PyEval_AcquireLock();
+    /* PyEval_AcquireLock(); */
     oldstate = PyThreadState_Swap(thread);
     Py_INCREF(ref);
     PyThreadState_Swap(oldstate);
-    PyEval_ReleaseLock();
+    /* PyEval_ReleaseLock(); */
 }
 
 static void decref(PyObject *ref) {
     PyThreadState *oldstate;
 
-    PyEval_AcquireLock();
+    /* PyEval_AcquireLock(); */
     oldstate = PyThreadState_Swap(thread);
     Py_DECREF(ref);
     PyThreadState_Swap(oldstate);
-    PyEval_ReleaseLock();
+    /* PyEval_ReleaseLock(); */
 }
 
 /* A mutex that protects the shared data structures. */
@@ -89,11 +89,11 @@ SDL_mutex *name_mutex;
 // #define ENTER() { printf("Locking by %s.\n", __FUNCTION__); _save = PyEval_SaveThread(); SDL_LockAudio(); printf("Lock by %s\n", __FUNCTION__);  }
 // #define EXIT() { SDL_UnlockAudio(); PyEval_RestoreThread(_save); printf("Release by %s\n", __FUNCTION__); }
 
-#define BEGIN() PyThreadState *_save;
-#define ENTER() { _save = PyEval_SaveThread(); SDL_LockAudio(); }
-#define EXIT() { SDL_UnlockAudio(); PyEval_RestoreThread(_save); }
-#define ALTENTER() { _save = PyEval_SaveThread(); }
-#define ALTEXIT() { PyEval_RestoreThread(_save); }
+#define BEGIN() /* PyThreadState *_save */;
+#define ENTER() { /* _save = PyEval_SaveThread(); */ SDL_LockAudio(); }
+#define EXIT() { SDL_UnlockAudio(); /* PyEval_RestoreThread(_save); */ }
+#define ALTENTER() { /* _save = PyEval_SaveThread(); */ }
+#define ALTEXIT() { /* PyEval_RestoreThread(_save); */ }
 
 /* Min and Max */
 #define min(a, b) (((a) < (b)) ? (a) : (b))
@@ -432,7 +432,62 @@ static void pan_audio(struct Channel *c, Uint8 *stream, int length) {
 
 }
 
+/* Minimal sinewave callback to assess performance */
+/* static unsigned int x = 0; */
+/* static unsigned int callback_count = 0; */
+/* static unsigned int callback_count_start = 0; */
+/* static void callback(void *userdata, Uint8 *stream, int length) { */
+/*   /\* printf("callback\n"); *\/ */
+/*   unsigned int now = SDL_GetTicks(); */
+/*   unsigned int delta_ms = now - callback_count_start; */
+/*   if (delta_ms > 500) { */
+/*     double cps = 1.0 * callback_count / delta_ms * 1000; */
+/*     printf("callback: %.02fHz\n", cps); */
+/*     //fflush(stdout); */
+/*     callback_count = 0; */
+/*     callback_count_start = now; */
+/*   } */
+/*   callback_count++; */
+
+/*   float vol = .5; */
+/*   unsigned int pitch = 440; */
+/*   if (audio_spec.format == AUDIO_F32LSB || audio_spec.format == AUDIO_F32MSB) { */
+/*     float* s = (float*) stream; */
+/*     length /= sizeof(float); */
+/*     length /= audio_spec.channels; */
+/*     for (int i = 0; i < length; i++) { */
+/*       for (int j = 0; j < audio_spec.channels; j++) { */
+/* 	s[i*audio_spec.channels + j] = sin(x * pitch * 2*M_PI / audio_spec.freq) * vol; */
+/*       } */
+/*       x++; */
+/*     } */
+/*   } else { /\* assuming we got AUDIO_S16SYS *\/ */
+/*     Sint16* s = (Sint16*) stream; */
+/*     length /= sizeof(Sint16); */
+/*     length /= audio_spec.channels; */
+/*     for (int i = 0; i < length; i++) { */
+/*       for (int j = 0; j < audio_spec.channels; j++) { */
+/* 	s[i*audio_spec.channels + j] = sin(x * pitch * 2*M_PI / audio_spec.freq) * vol \ */
+/* 	  * pow(2,15); */
+/*       } */
+/*       x++; */
+/*     } */
+/*   } */
+/* } */
+
+static unsigned int callback_count = 0;
+static unsigned int callback_count_start = 0;
 static void callback(void *userdata, Uint8 *stream, int length) {
+    unsigned int now = SDL_GetTicks();
+    unsigned int delta_ms = now - callback_count_start;
+    if (delta_ms > 500) {
+      double cps = 1.0 * callback_count / delta_ms * 1000;
+      //printf("callback: %.02fHz\n", cps);
+      callback_count = 0;
+      callback_count_start = now;
+    }
+    callback_count++;
+
     int channel = 0;
 
     memset(stream, 0, length);
@@ -446,6 +501,8 @@ static void callback(void *userdata, Uint8 *stream, int length) {
             continue;
         }
 
+        //printf("channel %d playing:%p paused:%d\n", channel, c->playing, c->paused);
+
         if (c->paused) {
             continue;
         }
@@ -1207,7 +1264,7 @@ void RPS_init(int freq, int stereo, int samples, int status) {
 
     name_mutex = SDL_CreateMutex();
 
-    PyEval_InitThreads();
+    /* PyEval_InitThreads(); */
     import_pygame_sdl2();
 
     if (!thread) {
diff --git a/renpy/audio/audio.py b/renpy/audio/audio.py
index 2be494cf..ebe34f4c 100644
--- a/renpy/audio/audio.py
+++ b/renpy/audio/audio.py
@@ -34,7 +34,7 @@ import time
 import pygame_sdl2  # @UnusedImport
 import os
 import re
-import threading
+#import threading
 import sys
 
 # Import the appropriate modules, or set them to None if we cannot.
@@ -142,7 +142,11 @@ class MusicContext(renpy.python.RevertableObject):
 next_channel_number = 0
 
 # the lock that mediates between the periodic and main threads.
-lock = threading.RLock()
+#lock = threading.RLock()
+class RLockStub:
+    def __enter__(self): pass
+    def __exit__(self, type, value, traceback): pass
+lock = RLockStub()
 
 
 class Channel(object):
@@ -840,9 +844,9 @@ def init():
 
         periodic_thread_quit = False
 
-        periodic_thread = threading.Thread(target=periodic_thread_main)
-        periodic_thread.daemon = True
-        periodic_thread.start()
+        #periodic_thread = threading.Thread(target=periodic_thread_main)
+        #periodic_thread.daemon = True
+        #periodic_thread.start()
 
 
 def quit():  # @ReservedAssignment
@@ -970,7 +974,15 @@ periodic_exc = None
 run_periodic = False
 
 # The condition the perodic thread runs on.
-periodic_condition = threading.Condition()
+class ConditionStub:
+    def __enter__(self): pass
+    def __exit__(self, type, value, traceback): pass
+    def notify(self): pass
+    def acquire(self): pass
+    def release(self): pass
+    def notifyAll(self): pass
+#periodic_condition = threading.Condition()
+periodic_condition = ConditionStub()
 
 
 def periodic_thread_main():
diff --git a/renpy/debug.py b/renpy/debug.py
index 90094db9..a9c35ded 100644
--- a/renpy/debug.py
+++ b/renpy/debug.py
@@ -26,7 +26,7 @@ from __future__ import print_function
 
 import renpy
 import __builtin__
-import threading
+#import threading
 import datetime
 import traceback
 import os
diff --git a/renpy/display/core.py b/renpy/display/core.py
index 330b8a7c..8ffbcef5 100644
--- a/renpy/display/core.py
+++ b/renpy/display/core.py
@@ -34,7 +34,7 @@ import sys
 import os
 import time
 import cStringIO
-import threading
+#import threading
 import copy
 import gc
 import inspect
@@ -1648,7 +1648,7 @@ class Interface(object):
         self.last_resize = None
 
         # The thread that can do display operations.
-        self.thread = threading.current_thread()
+        #self.thread = threading.current_thread()
 
         # Initialize audio.
         renpy.audio.audio.init()
@@ -1676,7 +1676,14 @@ class Interface(object):
         self.bgscreenshot_needed = False
 
         # Event used to signal background screenshot taken.
-        self.bgscreenshot_event = threading.Event()
+        #self.bgscreenshot_event = threading.Event()
+        class EventStub:
+            def set(self): pass
+            def isSet(self): return True
+            def clear(self): pass
+            def wait(self, timeout=None): return True
+        self.bgscreenshot_event = EventStub()
+
 
         # The background screenshot surface.
         self.bgscreenshot_surface = None
@@ -2118,7 +2125,7 @@ class Interface(object):
         if not self.started:
             return
 
-        if background:
+        if background and not renpy.emscripten:
             self.bgscreenshot_event.clear()
             self.bgscreenshot_needed = True
 
@@ -2194,6 +2201,9 @@ class Interface(object):
 
         try:
             renpy.display.scale.image_save_unscaled(window, filename)
+            if renpy.emscripten:
+                import emscripten
+                emscripten.run_script(r'''FSDownload('%s')''' % filename)
             return True
         except:
             if renpy.config.debug:
diff --git a/renpy/display/im.py b/renpy/display/im.py
index 0a763e64..93ea2745 100644
--- a/renpy/display/im.py
+++ b/renpy/display/im.py
@@ -29,7 +29,7 @@ import renpy.display
 import math
 import zipfile
 import cStringIO
-import threading
+#import threading
 import time
 import io
 
@@ -92,11 +92,21 @@ class Cache(object):
         # False if this is not the first preload in this tick.
         self.first_preload_in_tick = True
 
+        class ConditionStub:
+            def __enter__(self): pass
+            def __exit__(self, type, value, traceback): pass
+            def notify(self): cache.preload_thread_main()
+            def acquire(self): pass
+            def release(self): pass
+            def notifyAll(self): pass
+            def wait(self): pass
         # A lock that must be held when updating the cache.
-        self.lock = threading.Condition()
+        #self.lock = threading.Condition()
+        self.lock = ConditionStub()
 
         # A lock that mist be held to notify the preload thread.
-        self.preload_lock = threading.Condition()
+        #self.preload_lock = threading.Condition()
+        self.preload_lock = ConditionStub()
 
         # Is the preload_thread alive?
         self.keep_preloading = True
@@ -112,9 +122,9 @@ class Cache(object):
         self.cache_limit = 0
 
         # The preload thread.
-        self.preload_thread = threading.Thread(target=self.preload_thread_main, name="preloader")
-        self.preload_thread.setDaemon(True)
-        self.preload_thread.start()
+        #self.preload_thread = threading.Thread(target=self.preload_thread_main, name="preloader")
+        #self.preload_thread.setDaemon(True)
+        #self.preload_thread.start()
 
         # Have we been added this tick?
         self.added = set()
@@ -167,14 +177,14 @@ class Cache(object):
             self.cache_limit = int(renpy.config.image_cache_size_mb * 1024 * 1024 // 4)
 
     def quit(self):  # @ReservedAssignment
-        if not self.preload_thread.isAlive():
-            return
+        #if not self.preload_thread.isAlive():
+        #    return
 
         with self.preload_lock:
             self.keep_preloading = False
             self.preload_lock.notify()
 
-        self.preload_thread.join()
+        #self.preload_thread.join()
 
         self.clear()
 
@@ -436,7 +446,8 @@ class Cache(object):
 
     def preload_thread_main(self):
 
-        while self.keep_preloading:
+        #while self.keep_preloading:
+        if self.keep_preloading:
 
             self.preload_lock.acquire()
             self.preload_lock.wait()
@@ -507,11 +518,11 @@ class Cache(object):
                         self.preload_blacklist.add(image)
 
     def add_load_log(self, filename):
-
         if not renpy.config.developer:
             return
 
-        preload = (threading.current_thread() is self.preload_thread)
+        #preload = (threading.current_thread() is self.preload_thread)
+        preload = True
 
         self.load_log.insert(0, (time.time(), filename, preload))
 
diff --git a/renpy/display/pgrender.py b/renpy/display/pgrender.py
index c293895c..bce7811a 100644
--- a/renpy/display/pgrender.py
+++ b/renpy/display/pgrender.py
@@ -26,7 +26,7 @@ from __future__ import print_function
 
 import sys
 import pygame_sdl2 as pygame
-import threading
+#import threading
 import renpy.display
 import renpy.audio
 
@@ -139,7 +139,12 @@ copy_surface_unscaled = copy_surface
 safe_formats = { "png", "jpg", "jpeg", "webp" }
 
 # Lock used for loading unsafe formats.
-image_load_lock = threading.RLock()
+#image_load_lock = threading.RLock()
+class RLockStub:
+    def __enter__(self): pass
+    def __exit__(self, type, value, traceback): pass
+image_load_lock = RLockStub()
+
 
 
 def load_image(f, filename):
diff --git a/renpy/display/presplash.py b/renpy/display/presplash.py
index cbb9b904..15237c34 100644
--- a/renpy/display/presplash.py
+++ b/renpy/display/presplash.py
@@ -25,7 +25,7 @@
 
 from __future__ import print_function
 
-import threading
+#import threading
 import pygame_sdl2
 import os.path
 import sys
@@ -104,11 +104,11 @@ def start(basedir, gamedir):
     window.get_surface().blit(img, (0, 0))
     window.update()
 
-    global event_thread
+    #global event_thread
 
-    event_thread = threading.Thread(target=run_event_thread)
-    event_thread.daemon = True
-    event_thread.start()
+    #event_thread = threading.Thread(target=run_event_thread)
+    #event_thread.daemon = True
+    #event_thread.start()
 
     global start_time
     start_time = time.time()
@@ -120,7 +120,7 @@ def end():
     """
 
     global keep_running
-    global event_thread
+    #global event_thread
     global window
 
     if renpy.emscripten:
@@ -134,7 +134,7 @@ def end():
 
     keep_running = False
 
-    event_thread.join()
+    #event_thread.join()
 
     window.destroy()
     window = None
diff --git a/renpy/display/render.pyx b/renpy/display/render.pyx
index 6934b58b..cc3ff8ef 100644
--- a/renpy/display/render.pyx
+++ b/renpy/display/render.pyx
@@ -24,7 +24,7 @@ from __future__ import print_function
 
 import collections
 import pygame_sdl2 as pygame
-import threading
+#import threading
 import renpy
 import gc
 import math
@@ -32,7 +32,15 @@ import math
 # We grab the blit lock each time it is necessary to blit
 # something. This allows call to the pygame.transform functions to
 # disable blitting, should it prove necessary.
-blit_lock = threading.Condition()
+#blit_lock = threading.Condition()
+class ConditionStub:
+    def __enter__(self): pass
+    def __exit__(self, type, value, traceback): pass
+    def notify(self): pass
+    def acquire(self): pass
+    def release(self): pass
+    def notifyAll(self): pass
+blit_lock = ConditionStub()
 
 # This is a dictionary containing all the renders that we know of. It's a
 # map from displayable to dictionaries containing the render of that
diff --git a/renpy/loader.py b/renpy/loader.py
index 31c8d6b2..9e06e6ed 100644
--- a/renpy/loader.py
+++ b/renpy/loader.py
@@ -26,7 +26,7 @@ from pickle import loads
 from cStringIO import StringIO
 import sys
 import types
-import threading
+#import threading
 import zlib
 import re
 
@@ -795,7 +795,15 @@ auto_thread = None
 auto_quit_flag = True
 
 # The lock used by auto_thread.
-auto_lock = threading.Condition()
+#auto_lock = threading.Condition()
+class ConditionStub:
+    def __enter__(self): pass
+    def __exit__(self, type, value, traceback): pass
+    def notify(self): pass
+    def acquire(self): pass
+    def release(self): pass
+    def notifyAll(self): pass
+lock = ConditionStub()
 
 # Used to indicate that this file is blacklisted.
 auto_blacklisted = renpy.object.Sentinel("auto_blacklisted")
diff --git a/renpy/loadsave.py b/renpy/loadsave.py
index d1b146bb..b581978f 100644
--- a/renpy/loadsave.py
+++ b/renpy/loadsave.py
@@ -30,7 +30,7 @@ from cStringIO import StringIO
 
 import zipfile
 import re
-import threading
+#import threading
 import types
 import shutil
 import os
@@ -441,8 +441,14 @@ def save(slotname, extra_info='', mutate_flag=False):
 
 
 # Flag that lets us know if an autosave is in progress.
-autosave_not_running = threading.Event()
-autosave_not_running.set()
+#autosave_not_running = threading.Event()
+#autosave_not_running.set()
+class EventStub:
+    def set(self): pass
+    def isSet(self): return True
+    def clear(self): pass
+    def wait(self, timeout=None): return True
+autosave_not_running = EventStub()
 
 # The number of times autosave has been called without a save occuring.
 autosave_counter = 0
@@ -474,6 +480,9 @@ def autosave_thread(take_screenshot):
 
     finally:
         autosave_not_running.set()
+        if renpy.emscripten:
+            import emscripten
+            emscripten.syncfs()
 
 
 def autosave():
@@ -550,9 +559,13 @@ def force_autosave(take_screenshot=False, block=False):
         return
 
     autosave_not_running.clear()
-    t = threading.Thread(target=autosave_thread, args=(take_screenshot,))
-    t.daemon = True
-    t.start()
+    if not renpy.emscripten:
+        t = threading.Thread(target=autosave_thread, args=(take_screenshot,))
+        t.daemon = True
+        t.start()
+    else:
+        import emscripten
+        emscripten.async_call(autosave_thread, take_screenshot, -1)
 
 
 ################################################################################
diff --git a/renpy/main.py b/renpy/main.py
index 2dba3624..be1fd31b 100644
--- a/renpy/main.py
+++ b/renpy/main.py
@@ -536,7 +536,7 @@ def main():
                 renpy.display.interface.finish_pending()
 
                 # Give Ren'Py a couple of seconds to finish saving.
-                renpy.loadsave.autosave_not_running.wait(3.0)
+                #renpy.loadsave.autosave_not_running.wait(3.0)
 
     finally:
 
diff --git a/renpy/savelocation.py b/renpy/savelocation.py
index 0a5d28fa..366693a1 100644
--- a/renpy/savelocation.py
+++ b/renpy/savelocation.py
@@ -36,7 +36,12 @@ import threading
 from renpy.loadsave import clear_slot, safe_rename
 import shutil
 
-disk_lock = threading.RLock()
+#disk_lock = threading.RLock()
+class RLockStub:
+    def __enter__(self): pass
+    def __exit__(self, type, value, traceback): pass
+disk_lock = RLockStub()
+
 
 # A suffix used to disambguate temporary files being written by multiple
 # processes.
@@ -297,7 +302,10 @@ class FileLocation(object):
 
             os.rename(old, new)
 
-            self.sync()
+            # Cf. loadsave.autosave_thread()
+            #if renpy.emscripten:
+            #    emscripten.syncfs()
+
             self.scan()
 
     def copy(self, old, new):
@@ -519,8 +527,15 @@ scan_thread = None
 quit_scan_thread = False
 
 # The condition we wait on.
-scan_thread_condition = threading.Condition()
-
+#scan_thread_condition = threading.Condition()
+class ConditionStub:
+    def __enter__(self): pass
+    def __exit__(self, type, value, traceback): pass
+    def notify(self): pass
+    def acquire(self): pass
+    def release(self): pass
+    def notifyAll(self): pass
+scan_thread_condition = ConditionStub()
 
 def run_scan_thread():
     global quit_scan_thread
@@ -545,7 +560,7 @@ def quit():  # @ReservedAssignment
         quit_scan_thread = True
         scan_thread_condition.notifyAll()
 
-    scan_thread.join()
+    #scan_thread.join()
 
 
 def init():
@@ -566,5 +581,5 @@ def init():
 
     renpy.loadsave.location = location
 
-    scan_thread = threading.Thread(target=run_scan_thread)
-    scan_thread.start()
+    #scan_thread = threading.Thread(target=run_scan_thread)
+    #scan_thread.start()
diff --git a/renpy/script.py b/renpy/script.py
index d11a7dd0..fba91566 100644
--- a/renpy/script.py
+++ b/renpy/script.py
@@ -263,6 +263,11 @@ class Script(object):
         initcode = [ ]
 
         for fn, dir in script_files:  # @ReservedAssignment
+            # Mitigate "busy script" warning from the browser
+            if renpy.emscripten:
+                import emscripten
+                emscripten.sleep(0)
+
             self.load_appropriate_file(".rpyc", ".rpy", dir, fn, initcode)
 
         # Make the sort stable.
